{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["randomNumber","max","min","Math","ceil","floor","random","generateQuestion","a","b","result","ReadingLessions","useState","readingLessionIndex","setReadingLessionIndex","randomSeed","setRandomSeed","lessionContent","readingLessions","className","map","_","index","onClick","sort","slice","r","FirstStep","choose","Cell","value","type","TableSum","questions","TableSub","App","step","setStep","testingType","setTestingType","length","push","generateMultiQuestions","testingBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8864a819.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.css';\nimport readingLessions from \"./text.json\"\n\nconst MAX_SINGLE = 10\nconst MAX_QUESTIONS = 10\n\nfunction randomNumber(max, min = 1) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\n\nfunction generateQuestion() {\n  const a = randomNumber(MAX_SINGLE)\n  const b = randomNumber(MAX_SINGLE)\n  const sum = a + b\n  const c = randomNumber(3, 0)\n  const result = [a, b, sum]\n  result[c] = null;\n  return result;\n}\n\nfunction generateMultiQuestions(length) {\n  const result = [];\n  for (let index = 0; index < length; index++) {\n    result.push(generateQuestion())\n  }\n  return result;\n}\n\nfunction App() {\n  const [step, setStep] = useState(0)\n  const [testingType, setTestingType] = useState(0)\n  if (step === 0) {\n    return <FirstStep choose={(choose) => {\n      setStep(1);\n      setTestingType(choose);\n    }} />;\n  }\n  const questions = generateMultiQuestions(MAX_QUESTIONS)\n  let testingBody = null;\n  switch (testingType) {\n    case 0:\n      testingBody = <TableSum questions={questions} />;\n      break;\n    case 1:\n      testingBody = <TableSub questions={questions} />;\n      break;\n    case 2:\n      testingBody = <ReadingLessions />;\n      break;\n    default:\n      testingBody = <TableSum questions={questions} />;\n      break;\n  }\n  return (\n    <div className=\"App\">\n      {testingBody}\n    </div>\n  );\n}\n\nfunction ReadingLessions() {\n  const [readingLessionIndex, setReadingLessionIndex] = useState(null)\n  const [randomSeed, setRandomSeed] = useState(0)\n  const lessionContent = readingLessions[readingLessionIndex]\n  return (\n    <div>\n      <div className=\"reading-lessions-selector\">\n        {readingLessions.map((_, index) => (<button key={index} onClick={() => {\n          setRandomSeed(Math.random())\n          setReadingLessionIndex(index);\n        }\n        }>{index + 1}</button>))}\n      </div>\n      <div className=\"hidden\">\n        {randomSeed}\n      </div>\n      {lessionContent && <div className=\"reading-lession-content\">\n        {lessionContent.sort(() => Math.random() - 0.5).slice(0, 5).map(r => (<div key={r}>{r}</div>))}\n      </div>\n      }\n    </div>\n  )\n}\n\nfunction FirstStep({ choose }) {\n  return <div className=\"first-step-container\">\n    <button onClick={() => choose(0)}>+</button>\n    <button onClick={() => choose(1)}>-</button>\n    <button onClick={() => choose(2)}>Aa</button>\n  </div>\n}\n\nfunction Cell({ value }) {\n  if (value === null) {\n    return <input type=\"number\" className=\"hint\" />\n  }\n  return <div>{value}</div>\n}\n\nfunction TableSum({ questions }) {\n  // const rows = []\n  // for (let index = 0; index < questions.length; index++) {\n  //   const element = questions[index];\n  //   console.log(rows);\n\n  //   if (index % 2 === 0) {\n  //     rows.push([element])\n  //   } else {\n  //     rows[rows.length - 1].push(element)\n  //   }\n  // }\n  return (\n    <div className=\"App\">\n      <table>\n        <tbody>\n          {questions.map((r, index) => (\n            <tr key={index}>\n              <td >\n                <div className=\"question-container\">\n                  <Cell value={r[0]} />&nbsp;\n                  <div>+</div>&nbsp;\n                  <Cell value={r[1]} />&nbsp;\n                  <div>=</div>&nbsp;\n                  <Cell value={r[2]} />\n                </div>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nfunction TableSub({ questions }) {\n  // const rows = []\n  // for (let index = 0; index < questions.length; index++) {\n  //   const element = questions[index];\n  //   console.log(rows);\n\n  //   if (index % 2 === 0) {\n  //     rows.push([element])\n  //   } else {\n  //     rows[rows.length - 1].push(element)\n  //   }\n  // }\n  return (\n    <div className=\"App\">\n      <table>\n        <tbody>\n          {questions.map((r, index) => (\n            <tr key={index}>\n              <td >\n                <div className=\"question-container\">\n                  <Cell value={r[2]} />&nbsp;\n                  <div>-</div>&nbsp;\n                  <Cell value={r[1]} />&nbsp;\n                  <div>=</div>&nbsp;\n                  <Cell value={r[0]} />\n                </div>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}