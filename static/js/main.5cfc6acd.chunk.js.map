{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["randomNumber","max","min","Math","ceil","floor","random","generateQuestion","a","b","result","FirstStep","choose","className","onClick","Cell","value","type","TableSum","questions","map","r","index","TableSub","App","useState","step","setStep","isSumTest","setIsSumTest","length","push","generateMultiQuestions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAMA,SAASA,EAAaC,GAAe,IAAVC,EAAS,uDAAH,EAG/B,OAFAA,EAAMC,KAAKC,KAAKF,GAChBD,EAAME,KAAKE,MAAMJ,GACVE,KAAKE,MAAMF,KAAKG,UAAYL,EAAMC,GAAOA,GAGlD,SAASK,IACP,IAAMC,EAAIR,EAVO,IAWXS,EAAIT,EAXO,IAcXU,EAAS,CAACF,EAAGC,EAFPD,EAAIC,GAIhB,OADAC,EAFUV,EAAa,EAAG,IAEd,KACLU,EA4BT,SAASC,EAAT,GAAgC,IAAXC,EAAU,EAAVA,OACnB,OAAO,sBAAKC,UAAU,uBAAf,UACL,wBAAQC,QAAS,kBAAMF,GAAO,IAA9B,eACA,wBAAQE,QAAS,kBAAMF,GAAO,IAA9B,kBAIJ,SAASG,EAAT,GAA0B,IAAVC,EAAS,EAATA,MACd,OAAc,OAAVA,EACK,uBAAOC,KAAK,SAASJ,UAAU,SAEjC,8BAAMG,IAGf,SAASE,EAAT,GAAkC,IAAdC,EAAa,EAAbA,UAYlB,OACE,qBAAKN,UAAU,MAAf,SACE,gCACE,gCACGM,EAAUC,KAAI,SAACC,EAAGC,GAAJ,OACb,6BACE,6BACE,sBAAKT,UAAU,qBAAf,UACE,cAACE,EAAD,CAAMC,MAAOK,EAAE,KADjB,OAEE,oCAFF,OAGE,cAACN,EAAD,CAAMC,MAAOK,EAAE,KAHjB,OAIE,oCAJF,OAKE,cAACN,EAAD,CAAMC,MAAOK,EAAE,WAPZC,YAkBrB,SAASC,EAAT,GAAkC,IAAdJ,EAAa,EAAbA,UAYlB,OACE,qBAAKN,UAAU,MAAf,SACE,gCACE,gCACGM,EAAUC,KAAI,SAACC,EAAGC,GAAJ,OACb,6BACE,6BACE,sBAAKT,UAAU,qBAAf,UACE,cAACE,EAAD,CAAMC,MAAOK,EAAE,KADjB,OAEE,oCAFF,OAGE,cAACN,EAAD,CAAMC,MAAOK,EAAE,KAHjB,OAIE,oCAJF,OAKE,cAACN,EAAD,CAAMC,MAAOK,EAAE,WAPZC,YAkBNE,MArGf,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNC,EADM,KACAC,EADA,OAEqBF,oBAAS,GAF9B,mBAENG,EAFM,KAEKC,EAFL,KAGb,GAAa,IAATH,EACF,OAAO,cAACf,EAAD,CAAWC,OAAQ,SAACA,GACzBe,EAAQ,GACRE,EAAajB,MAGjB,IAAMO,EAjBR,SAAgCW,GAE9B,IADA,IAAMpB,EAAS,GACNY,EAAQ,EAAGA,EAAQQ,EAAQR,IAClCZ,EAAOqB,KAAKxB,KAEd,OAAOG,EAYWsB,CAnCE,IAoCpB,OACE,qBAAKnB,UAAU,MAAf,SACGe,EAAY,cAACV,EAAD,CAAUC,UAAWA,IAAgB,cAACI,EAAD,CAAUJ,UAAWA,OC9B9Dc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.5cfc6acd.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.css';\n\nconst MAX_SINGLE = 10\nconst MAX_QUESTIONS = 10\n\nfunction randomNumber(max, min = 1) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\n\nfunction generateQuestion() {\n  const a = randomNumber(MAX_SINGLE)\n  const b = randomNumber(MAX_SINGLE)\n  const sum = a + b\n  const c = randomNumber(3, 0)\n  const result = [a, b, sum]\n  result[c] = null;\n  return result;\n}\n\nfunction generateMultiQuestions(length) {\n  const result = [];\n  for (let index = 0; index < length; index++) {\n    result.push(generateQuestion())\n  }\n  return result;\n}\n\nfunction App() {\n  const [step, setStep] = useState(0)\n  const [isSumTest, setIsSumTest] = useState(false)\n  if (step === 0) {\n    return <FirstStep choose={(choose) => {\n      setStep(1);\n      setIsSumTest(choose);\n    }} />;\n  }\n  const questions = generateMultiQuestions(MAX_QUESTIONS)\n  return (\n    <div className=\"App\">\n      {isSumTest ? <TableSum questions={questions} /> : <TableSub questions={questions} />}\n    </div>\n  );\n}\n\nfunction FirstStep({ choose }) {\n  return <div className=\"first-step-container\">\n    <button onClick={() => choose(true)}>+</button>\n    <button onClick={() => choose(false)}>-</button>\n  </div>\n}\n\nfunction Cell({ value }) {\n  if (value === null) {\n    return <input type=\"number\" className=\"hint\" />\n  }\n  return <div>{value}</div>\n}\n\nfunction TableSum({ questions }) {\n  // const rows = []\n  // for (let index = 0; index < questions.length; index++) {\n  //   const element = questions[index];\n  //   console.log(rows);\n\n  //   if (index % 2 === 0) {\n  //     rows.push([element])\n  //   } else {\n  //     rows[rows.length - 1].push(element)\n  //   }\n  // }\n  return (\n    <div className=\"App\">\n      <table>\n        <tbody>\n          {questions.map((r, index) => (\n            <tr key={index}>\n              <td >\n                <div className=\"question-container\">\n                  <Cell value={r[0]} />&nbsp;\n                  <div>+</div>&nbsp;\n                  <Cell value={r[1]} />&nbsp;\n                  <div>=</div>&nbsp;\n                  <Cell value={r[2]} />\n                </div>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nfunction TableSub({ questions }) {\n  // const rows = []\n  // for (let index = 0; index < questions.length; index++) {\n  //   const element = questions[index];\n  //   console.log(rows);\n\n  //   if (index % 2 === 0) {\n  //     rows.push([element])\n  //   } else {\n  //     rows[rows.length - 1].push(element)\n  //   }\n  // }\n  return (\n    <div className=\"App\">\n      <table>\n        <tbody>\n          {questions.map((r, index) => (\n            <tr key={index}>\n              <td >\n                <div className=\"question-container\">\n                  <Cell value={r[2]} />&nbsp;\n                  <div>-</div>&nbsp;\n                  <Cell value={r[1]} />&nbsp;\n                  <div>=</div>&nbsp;\n                  <Cell value={r[0]} />\n                </div>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}